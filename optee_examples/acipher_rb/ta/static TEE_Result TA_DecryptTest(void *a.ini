static TEE_Result TA_DecryptTest(void *alias){
	// foo 位置插入的 RSA 专用测试代码
    DMSG("--- Starting RSA encryption test with persistent key ---");
    
    // 1. 准备测试数据 (RSA加密有长度限制，需要分段处理)
    const char *plaintext = "OP-TEE RSA test";
    size_t plaintext_len = strlen(plaintext) + 1; // 包含NULL终止符
    uint8_t *ciphertext = NULL;
    uint8_t *decrypted = NULL;
    size_t ciphertext_len = 0;
    size_t decrypted_len = 0;
	uint32_t storage_id = TEE_STORAGE_PRIVATE; 
    // TEE_Result res = TEE_SUCCESS;

    // 2. 通过alias重新打开持久化RSA密钥对象
    TEE_ObjectHandle rsa_key = TEE_HANDLE_NULL;
    TEE_Result res = TEE_OpenPersistentObject(
            storage_id,
            alias, strlen(alias),
            TEE_DATA_FLAG_ACCESS_READ,
            &rsa_key);
    
    if (res != TEE_SUCCESS) {
        EMSG("Failed to open RSA key: 0x%x", res);
        // goto cleanup;
    }

    TEE_OperationHandle oper = TEE_HANDLE_NULL;
	res = TEE_AllocateOperation(&oper, 
						TEE_ALG_RSAES_PKCS1_V1_5, 
						TEE_MODE_ENCRYPT,
						1024); // 与模数位数一致
	if (res != TEE_SUCCESS) {
		EMSG("Allocate operation failed: 0x%x", res);
	}

	// 设置公钥参数
	res = TEE_SetOperationKey(oper, rsa_key);
	if (res != TEE_SUCCESS) {
		TEE_FreeOperation(oper);
		return res;
	}

		DMSG("DEBUG -1");

	DMSG("DEBUG 1");
	res = TEE_AsymmetricEncrypt(oper,
							NULL, 0, // 无额外参数
							plaintext, plaintext_len,
							NULL, &ciphertext_len); // mod_len复用为输出长度

	ciphertext = TEE_Malloc(ciphertext_len, 0);
						
	res = TEE_AsymmetricEncrypt(oper,
							NULL, 0, // 无额外参数
							plaintext, plaintext_len,
							ciphertext, &ciphertext_len); // mod_len复用为输出长度
							
	if (res != TEE_SUCCESS) {
		EMSG("Asymmetric encrypt failed: 0x%x", res);
	}

	printf("ciphertext:\n"); 
	for (size_t i = 0; i < ciphertext_len; i++) {
        printf("%02x ", ciphertext[i]); // 16进制格式
        if ((i + 1) % 8 == 0) printf("\n");
    }
	printf("\n");
	res = TEE_AllocateOperation(&oper, 
						TEE_ALG_RSAES_PKCS1_V1_5, 
						TEE_MODE_DECRYPT,
						1024); // 与模数位数一致
	if (res != TEE_SUCCESS) {
		EMSG("Allocate operation failed: 0x%x", res);
	}

	// 设置公钥参数
	res = TEE_SetOperationKey(oper, rsa_key);
	if (res != TEE_SUCCESS) {
		TEE_FreeOperation(oper);
		return res;
	}

	res = TEE_AsymmetricDecrypt(oper,
							NULL, 0, // 无额外参数
							ciphertext, ciphertext_len,
							NULL, &decrypted_len); // mod_len复用为输出长度

	decrypted = TEE_Malloc(decrypted_len, 0);
	res = TEE_AsymmetricDecrypt(oper,
							NULL, 0, // 无额外参数
							ciphertext, ciphertext_len,
							decrypted, &decrypted_len); // mod_len复用为输出长度
	
	printf("decrypted:\n"); 
	for (size_t i = 0; i < decrypted_len; i++) {
        printf("%02x ", decrypted[i]); // 16进制格式
        if ((i + 1) % 8 == 0) printf("\n");
    }
	printf("\n");
	printf("%s\n", (char *)decrypted);
	TEE_CloseObject(rsa_key);

	DMSG("--- Finished RSA encryption test with persistent key ---");
}