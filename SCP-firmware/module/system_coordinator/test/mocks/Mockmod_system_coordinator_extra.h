/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_SYSTEM_COORDINATOR_EXTRA_H
#define _MOCKMOD_SYSTEM_COORDINATOR_EXTRA_H

#include "unity.h"
#include "mod_system_coordinator_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_system_coordinator_extra_Init(void);
void Mockmod_system_coordinator_extra_Destroy(void);
void Mockmod_system_coordinator_extra_Verify(void);


typedef void(*cmock_mod_system_coordinator_extra_func_ptr1)(uintptr_t param);


#define phase_api_stub_IgnoreAndReturn(cmock_retval) phase_api_stub_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void phase_api_stub_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define phase_api_stub_StopIgnore() phase_api_stub_CMockStopIgnore()
void phase_api_stub_CMockStopIgnore(void);
#define phase_api_stub_ExpectAndReturn(cmock_retval) phase_api_stub_CMockExpectAndReturn(__LINE__, cmock_retval)
void phase_api_stub_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_phase_api_stub_CALLBACK)(int cmock_num_calls);
void phase_api_stub_AddCallback(CMOCK_phase_api_stub_CALLBACK Callback);
void phase_api_stub_Stub(CMOCK_phase_api_stub_CALLBACK Callback);
#define phase_api_stub_StubWithCallback phase_api_stub_Stub
#define start_alarm_api_IgnoreAndReturn(cmock_retval) start_alarm_api_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void start_alarm_api_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define start_alarm_api_StopIgnore() start_alarm_api_CMockStopIgnore()
void start_alarm_api_CMockStopIgnore(void);
#define start_alarm_api_ExpectAnyArgsAndReturn(cmock_retval) start_alarm_api_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void start_alarm_api_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define start_alarm_api_ExpectAndReturn(alarm_id, microseconds, type, callback, param, cmock_retval) start_alarm_api_CMockExpectAndReturn(__LINE__, alarm_id, microseconds, type, callback, param, cmock_retval)
void start_alarm_api_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t alarm_id, unsigned int microseconds, enum mod_timer_alarm_type type, cmock_mod_system_coordinator_extra_func_ptr1 callback, uintptr_t param, int cmock_to_return);
typedef int (* CMOCK_start_alarm_api_CALLBACK)(fwk_id_t alarm_id, unsigned int microseconds, enum mod_timer_alarm_type type, cmock_mod_system_coordinator_extra_func_ptr1 callback, uintptr_t param, int cmock_num_calls);
void start_alarm_api_AddCallback(CMOCK_start_alarm_api_CALLBACK Callback);
void start_alarm_api_Stub(CMOCK_start_alarm_api_CALLBACK Callback);
#define start_alarm_api_StubWithCallback start_alarm_api_Stub
#define start_alarm_api_IgnoreArg_alarm_id() start_alarm_api_CMockIgnoreArg_alarm_id(__LINE__)
void start_alarm_api_CMockIgnoreArg_alarm_id(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_microseconds() start_alarm_api_CMockIgnoreArg_microseconds(__LINE__)
void start_alarm_api_CMockIgnoreArg_microseconds(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_type() start_alarm_api_CMockIgnoreArg_type(__LINE__)
void start_alarm_api_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_callback() start_alarm_api_CMockIgnoreArg_callback(__LINE__)
void start_alarm_api_CMockIgnoreArg_callback(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_param() start_alarm_api_CMockIgnoreArg_param(__LINE__)
void start_alarm_api_CMockIgnoreArg_param(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
