/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_THERMAL_POWER_ESTIMATOR_EXTRA_H
#define _MOCKMOD_THERMAL_POWER_ESTIMATOR_EXTRA_H

#include "unity.h"
#include "mod_thermal_power_estimator_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_thermal_power_estimator_extra_Init(void);
void Mockmod_thermal_power_estimator_extra_Destroy(void);
void Mockmod_thermal_power_estimator_extra_Verify(void);




#define mod_pid_controller_update_IgnoreAndReturn(cmock_retval) mod_pid_controller_update_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mod_pid_controller_update_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mod_pid_controller_update_StopIgnore() mod_pid_controller_update_CMockStopIgnore()
void mod_pid_controller_update_CMockStopIgnore(void);
#define mod_pid_controller_update_ExpectAnyArgsAndReturn(cmock_retval) mod_pid_controller_update_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mod_pid_controller_update_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mod_pid_controller_update_ExpectAndReturn(id, input, output, cmock_retval) mod_pid_controller_update_CMockExpectAndReturn(__LINE__, id, input, output, cmock_retval)
void mod_pid_controller_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, int64_t input, int64_t* output, int cmock_to_return);
typedef int (* CMOCK_mod_pid_controller_update_CALLBACK)(fwk_id_t id, int64_t input, int64_t* output, int cmock_num_calls);
void mod_pid_controller_update_AddCallback(CMOCK_mod_pid_controller_update_CALLBACK Callback);
void mod_pid_controller_update_Stub(CMOCK_mod_pid_controller_update_CALLBACK Callback);
#define mod_pid_controller_update_StubWithCallback mod_pid_controller_update_Stub
#define mod_pid_controller_update_ExpectWithArrayAndReturn(id, input, output, output_Depth, cmock_retval) mod_pid_controller_update_CMockExpectWithArrayAndReturn(__LINE__, id, input, output, output_Depth, cmock_retval)
void mod_pid_controller_update_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, int64_t input, int64_t* output, int output_Depth, int cmock_to_return);
#define mod_pid_controller_update_ReturnThruPtr_output(output) mod_pid_controller_update_CMockReturnMemThruPtr_output(__LINE__, output, sizeof(int64_t))
#define mod_pid_controller_update_ReturnArrayThruPtr_output(output, cmock_len) mod_pid_controller_update_CMockReturnMemThruPtr_output(__LINE__, output, cmock_len * sizeof(*output))
#define mod_pid_controller_update_ReturnMemThruPtr_output(output, cmock_size) mod_pid_controller_update_CMockReturnMemThruPtr_output(__LINE__, output, cmock_size)
void mod_pid_controller_update_CMockReturnMemThruPtr_output(UNITY_LINE_TYPE cmock_line, int64_t* output, size_t cmock_size);
#define mod_pid_controller_update_IgnoreArg_id() mod_pid_controller_update_CMockIgnoreArg_id(__LINE__)
void mod_pid_controller_update_CMockIgnoreArg_id(UNITY_LINE_TYPE cmock_line);
#define mod_pid_controller_update_IgnoreArg_input() mod_pid_controller_update_CMockIgnoreArg_input(__LINE__)
void mod_pid_controller_update_CMockIgnoreArg_input(UNITY_LINE_TYPE cmock_line);
#define mod_pid_controller_update_IgnoreArg_output() mod_pid_controller_update_CMockIgnoreArg_output(__LINE__)
void mod_pid_controller_update_CMockIgnoreArg_output(UNITY_LINE_TYPE cmock_line);
#define mod_sensor_get_data_IgnoreAndReturn(cmock_retval) mod_sensor_get_data_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mod_sensor_get_data_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mod_sensor_get_data_StopIgnore() mod_sensor_get_data_CMockStopIgnore()
void mod_sensor_get_data_CMockStopIgnore(void);
#define mod_sensor_get_data_ExpectAnyArgsAndReturn(cmock_retval) mod_sensor_get_data_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mod_sensor_get_data_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mod_sensor_get_data_ExpectAndReturn(id, data, cmock_retval) mod_sensor_get_data_CMockExpectAndReturn(__LINE__, id, data, cmock_retval)
void mod_sensor_get_data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, struct mod_sensor_data* data, int cmock_to_return);
typedef int (* CMOCK_mod_sensor_get_data_CALLBACK)(fwk_id_t id, struct mod_sensor_data* data, int cmock_num_calls);
void mod_sensor_get_data_AddCallback(CMOCK_mod_sensor_get_data_CALLBACK Callback);
void mod_sensor_get_data_Stub(CMOCK_mod_sensor_get_data_CALLBACK Callback);
#define mod_sensor_get_data_StubWithCallback mod_sensor_get_data_Stub
#define mod_sensor_get_data_ExpectWithArrayAndReturn(id, data, data_Depth, cmock_retval) mod_sensor_get_data_CMockExpectWithArrayAndReturn(__LINE__, id, data, data_Depth, cmock_retval)
void mod_sensor_get_data_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, struct mod_sensor_data* data, int data_Depth, int cmock_to_return);
#define mod_sensor_get_data_ReturnThruPtr_data(data) mod_sensor_get_data_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(struct mod_sensor_data))
#define mod_sensor_get_data_ReturnArrayThruPtr_data(data, cmock_len) mod_sensor_get_data_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define mod_sensor_get_data_ReturnMemThruPtr_data(data, cmock_size) mod_sensor_get_data_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void mod_sensor_get_data_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, struct mod_sensor_data* data, size_t cmock_size);
#define mod_sensor_get_data_IgnoreArg_id() mod_sensor_get_data_CMockIgnoreArg_id(__LINE__)
void mod_sensor_get_data_CMockIgnoreArg_id(UNITY_LINE_TYPE cmock_line);
#define mod_sensor_get_data_IgnoreArg_data() mod_sensor_get_data_CMockIgnoreArg_data(__LINE__)
void mod_sensor_get_data_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
